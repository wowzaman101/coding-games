// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"coding-games/config"
	"coding-games/infrastructure/server"
	"coding-games/internal/handler/gamehdl"
	"github.com/gofiber/fiber/v3"
	"log"
)

// Injectors from main.go:

func initialize() *dependencies {
	handler := gamehdl.New()
	app := server.New(handler)
	mainDependencies := &dependencies{
		server: app,
	}
	return mainDependencies
}

// main.go:

type dependencies struct {
	server *fiber.App
}

func main() {
	// Initialize dependencies
	d := initialize()
	cfg := config.Get()

	log.Printf("Starting coding-games server on port %s", cfg.Server.Port)

	// Set up graceful shutdown
	defer func() {
		log.Println("Shutting down server...")
		if err := d.server.Shutdown(); err != nil {
			log.Printf("Error during server shutdown: %v", err)
		} else {
			log.Println("Server gracefully stopped")
		}
	}()

	// Start the server
	serverAddr := ":" + cfg.Server.Port
	if err := d.server.Listen(serverAddr); err != nil {
		log.Fatalf("Failed to start server on %s: %v", serverAddr, err)
	}
}
